package controllers

import (
	"errors"
	"kwanjai/configuration"
	"kwanjai/helpers"
	"kwanjai/libraries"
	"kwanjai/models"
	"log"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/omise/omise-go"
	"github.com/omise/omise-go/operations"
	"github.com/omise/omise-go/schedule"
)

// ProfilePicture endpoint
func ProfilePicture() gin.HandlerFunc {
	return func(ginContext *gin.Context) {
		file, _, _ := ginContext.Request.FormFile("file")
		user, _ := ginContext.Get("user")
		libraries.CloudStorageUpload(file, user.(*models.User).Username+".png")
		ginContext.JSON(http.StatusOK, gin.H{"message": "Uploaded."})
	}
}

// MyProfile endpoint
func MyProfile() gin.HandlerFunc {
	return func(ginContext *gin.Context) {
		user, _ := ginContext.Get("user") // user always exists
		userObject := user.(*models.User)
		userObject.CustomerID = ""
		userObject.SubscriptionID = ""
		ginContext.JSON(http.StatusOK, gin.H{
			"message": "Get profile successfully",
			"profile": userObject,
		})
	}
}

// UpdateProfile endpoint
func UpdateProfile() gin.HandlerFunc {
	return func(ginContext *gin.Context) {
		profile := new(models.User)
		username := helpers.GetUsername(ginContext)
		ginContext.ShouldBindJSON(profile)
		libraries.FirestoreUpdateFieldIfNotBlank("users", username, "Firstname", profile.Firstname)
		libraries.FirestoreUpdateFieldIfNotBlank("users", username, "Lastname", profile.Lastname)
		ginContext.JSON(http.StatusOK, gin.H{
			"message": "Profile updated.",
		})
	}
}

type paymentData struct {
	Token string `json:"token"`
	Price int    `json:"price"`
}

// UpgradePlan endpoint
func UpgradePlan() gin.HandlerFunc {
	return func(ginContext *gin.Context) {
		user, _ := ginContext.Get("user")
		userObject := user.(*models.User)
		payment := new(paymentData)
		ginContext.ShouldBindJSON(payment)
		client, err := omise.NewClient(configuration.OmisePublicKey, configuration.OmiseSecretKey)
		if err != nil {
			log.Panicln(err)
		}
		if userObject.CustomerID == "" {
			customer, create := &omise.Customer{}, &operations.CreateCustomer{
				Email:       userObject.Email,
				Description: userObject.Username,
				Card:        payment.Token,
			}
			if err := client.Do(customer, create); err != nil {
				log.Panicln(err)
			}
			userObject.CustomerID = customer.ID
			_, err = libraries.FirestoreUpdateField("users", userObject.Username, "IsVerified", true)
			if err != nil {
				log.Panicln(err)
			}
			_, err = libraries.FirestoreUpdateField("users", userObject.Username, "CustomerID", customer.ID)
			if err != nil {
				log.Panicln(err)
			}
		} else {
			// add card from token
			customer, updateCard := &omise.Customer{}, &operations.UpdateCustomer{
				CustomerID: userObject.CustomerID,
				Card:       payment.Token,
			}
			if err := client.Do(customer, updateCard); err != nil {
				log.Panic(err.Error())
			}

			// retrieve customer data
			customer, retrieve := &omise.Customer{}, &operations.RetrieveCustomer{
				CustomerID: userObject.CustomerID,
			}
			if err := client.Do(customer, retrieve); err != nil {
				log.Panicln(err)
			}

			allCards := customer.Cards.Data

			// delete old card
			model, destroy := &omise.Deletion{}, &operations.DestroyCard{
				CustomerID: customer.ID,
				CardID:     allCards[0].ID,
			}
			if err := client.Do(model, destroy); err != nil {
				log.Panicln(err)
			}
		}
		if userObject.SubscriptionID != "" {
			// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
			// Original command: curl https://api.omise.co/schedules/userObject.SubscriptionID -X DELETE -u config.OmiseSecretKey:
			req, err := http.NewRequest("DELETE", "https://api.omise.co/schedules/"+userObject.SubscriptionID, nil)
			if err != nil {
				log.Panicln(err)
			}
			req.SetBasicAuth(configuration.OmiseSecretKey, "")
			resp, err := http.DefaultClient.Do(req)
			if err != nil {
				log.Panicln(err)
			}
			defer resp.Body.Close()
		}

		var schd omise.Schedule
		_, _, date := time.Now().Date()
		create := operations.CreateChargeSchedule{
			Every:       1,
			Period:      schedule.PeriodMonth,
			DaysOfMonth: schedule.DaysOfMonth{date},
			StartDate:   time.Now().Format("2006-01-02"),
			EndDate:     time.Now().Add(24 * time.Hour * 365).Format("2006-01-02"),
			Customer:    userObject.CustomerID,
			Amount:      payment.Price,
			Currency:    "usd",
			Description: "Subscription fee",
		}

		if err := client.Do(&schd, &create); err != nil {
			log.Panicln(err.Error())
			return
		}

		_, err = libraries.FirestoreUpdateField("users", userObject.Username, "SubscriptionID", schd.ID)
		if err != nil {
			log.Panicln(err)
		}

		plan := ""
		switch payment.Price {
		case 100:
			plan = "Plus"
		case 400:
			plan = "Pro"
		default:
			log.Panicln(errors.New("invalid plan"))
		}

		_, err = libraries.FirestoreUpdateField("users", userObject.Username, "Plan", plan)
		if err != nil {
			log.Panicln(err)
		}
		_, err = libraries.FirestoreUpdateField("users", userObject.Username, "DateOfSubscription", date)
		if err != nil {
			log.Panicln(err)
		}

		ginContext.JSON(http.StatusOK, gin.H{
			"message": "Subscribed successfully.",
		})
	}
}

// Unsubscribe endpoint
func Unsubscribe() gin.HandlerFunc {
	return func(ginContext *gin.Context) {
		user, _ := ginContext.Get("user")
		userObject := user.(*models.User)
		// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
		// Original command: curl https://api.omise.co/schedules/userObject.SubscriptionID -X DELETE -u config.OmiseSecretKey:
		req, err := http.NewRequest("DELETE", "https://api.omise.co/schedules/"+userObject.SubscriptionID, nil)
		if err != nil {
			log.Panicln(err)
		}
		req.SetBasicAuth(configuration.OmiseSecretKey, "")
		resp, err := http.DefaultClient.Do(req)
		if err != nil {
			log.Panicln(err)
		}
		defer resp.Body.Close()
		_, err = libraries.FirestoreUpdateField("users", userObject.Username, "DateOfSubscription", 0)
		if err != nil {
			log.Panicln(err)
		}
		_, err = libraries.FirestoreUpdateField("users", userObject.Username, "Plan", "Starter")
		if err != nil {
			log.Panicln(err)
		}
		_, err = libraries.FirestoreUpdateField("users", userObject.Username, "SubscriptionID", "")
		if err != nil {
			log.Panicln(err)
		}
		ginContext.JSON(http.StatusOK, gin.H{
			"message": "Unsubscribed successfully.",
		})
	}
}
